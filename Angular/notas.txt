como matar el ng serve:
for /f "tokens=5" %a in ('netstat -ano ^| find "4200" ^| find "LISTENING"') do taskkill /f /pid %a


angular = angular2 a 10
angularjs = 1ra version de angular

componentes:
una app en angular esta basada en multiples componentes
un componente son pequeñas clases que cumplen una funcion especifica ejÑ menu de navegacion, barra lateral, main, footer
los componentes en angular son clases normales que tienen un pequeño decorador especifico

directivas estructurales:
son instruccions que le dicen al html que hacer.

	*ngif = "TRUE" --> el componente se muestra, si es false ese componente ni aparece en el html

----------------------------------
36:

documentacion oficial en angular.io
	pk = package o modulo
	i = interfaz
	c = clase
	k = constante (x eso esta en mayuscula)
	e = enumeracion

tags:
stable = se puede usr en la ultima version estable (en el menu izq se ve cual es, y se puede consultar la docu de versiones anteriores)


pags utiles

codigos ya hechos en otras paginas
https://plnkr.co/
https://stackblitz.com/


src/index.html
es lo primero que la app va a cargar
<my-app> esta definido en scr/app/app.components.ts

decorador: expande funcionalidades a la clase

----------------------------------
38:
CLI = command line interface

Tip: se puede abrir una consola, escribir "cd " y arrastrar la carpeta en la que queremos posicionarnos

abri consola
cd C:\Users\asd\Desktop\tests\angulartests\CursoAngular10CeroAExperto\Angular

crear un nuevo proyecto (se puede cambiar el nombre mas adelante):
ng new my-app
create angular routing? NO (pq la idea es hacerlo manualmente en esta fase de aprendizaje)
Which stylesheet format would you like to use? (Use arrow keys) >> CSS (en este curso se usará css nomas
(se descargaran de github un monton de paquetes especificados en el package.json)
cambiar el nombre de la carpeta por la que queremos que lleve nuestra app: 01-hola-mundo

cd C:\Users\asd\Desktop\tests\angulartests\CursoAngular10CeroAExperto\Angular\01-hola-mundo
ng serve
eso va a levantar un servidor local en el puerto 4200 (x defecto)
sino podes hacer:
ng serve -p 4201
si lo tenes ocupado

ng serve -o
-o = open y lo q hace es abrir el navegador por defecto

{{ }} = interpolacion

----------------------------------
39:
Estructura de un proyecto:

e2e:
no es necesario para crear aplicaciones pero es para correr pruebas automaticas (end 2 end)

node_modules:
modulos de node, necesarios para el desarrollo. Es donde se guardan los paquetes declarados en el package.json

Src:
es la carpeta de source, es donde esta nuestra app. Donde trabajamos principalmente

.gitignore:
q ignore las carpetas q no nos interesa subir a git, por ej node_modules

angular.json:
le dice a angular como es nuestra app y como funciona. Nosotros principalmente trabajaremos en las secciones assets styles y scripts
angular agrupará en un archivo todo lo que declaremos ahí, se prfundizará más adelante

package-lock.json:
le dice a nuestra app de node como se creó el package.json, no se modifica manualmente, solo deja un rastro de como se creó el package.json

package.json:
super importante. Aunque en gral no se toca. Se va creando de forma automatica.

Private: declara todas las dependencias que necesita nuestro proyecto al pasar a produccion
devDependencies: Dependencias de desarrollo. Se usan mientras creamos la app. Ej el tslint.
README.md: detalles de nuestra app, para git. md = markdown, es como el html pero mas ligero.
tsconfig.json: le dice a typescript como trabajar, ej: "target": es5 --> trabajaremos con ecma script 5.
tslint.json: nos ayuda  escribir un codigo mas limpio de js y ts, los errores que aparezcan del tipo tslint, son porque violan alguna regla escrita aqui.

/src/app:
el app.comonent es el primer componente que nuestra app de angular va a cargar.

(
ver /scr/index.html:
pg web comun y corriente salvo por la etiqueta app-root, Angular renderizará toda la app dentro de las etiquetas <app-root></app-root>
)
app-root esta definido en app.component.ts

app.comonent.html: html del componente
app.comonent.ts: 
app.comonent.css: estilo q se aplica unicamente al html de mismo nombre (no necesariamente deben tener mismo nombre, eso se define en el app.component.ts)
app.comonent.spect.ts: cualquier archivo que tenga la palabra spec, es un archivo de pruebas automaticas. Se ve en el curso avanzado
app.module.ts: a veces se manipula manualmente, a veces automaticamente. Tiene un decorador especial, y definido de manera especial, llamado ngmodule, se prfundizará más adelante

/assets: se coloca recurso estatico, como imagenes
.gitkeep: es un archivo de git vacio, su nombre indica a git q debe subirlo al repositorio (por default, si una carpeta esta vacia, git la ignora)

/environments:
contiene 2 archivos, environment.prod.ts y environment.ts: contiene variables de entorno

browserlist: arhivo nuevo, no se usa/toca

karma.config.js: archivo de configuracion de las prueba de karma, no lo vamos a tocar en este curso

main.ts: es el 1er codigo q angular va a lanzar, para correr la app:
	platformborwserdynaic(): se hace de forma automatica, configura el ambiente para una app web

polifills.ts: son funciones que ayudan a la compatibilidad entre versiones viejas de navegadores web.

syles.css: estilos globales
---------------------------------------------
40:

erores importando el css de bootstrap:
	hola los errores de advertencia, ve settings en herramientas del desarrollador y quita el check a enable CSS source maps y Enable Javascript source maps
	claro que esos son solo mensajes de advertencia
	en relación a error 404 , revisa bien en el index 

cuando nombramos un selector, se lo comienza nombrando como app- para indicar que es algo personalizado/nuestro

creamos un componente:
\src\app\components\header\header.component.ts:
si el html es sencillo, hasta 4 lineas max, se puede definir asi:
    template: `<h1> Header component</h1>`
con back ticks!

hay q decirle a angular q esto es un componente, eso se hace en \src\app\app.module.ts:

--------------------------------------------
42:
crear un componente automaticamente:
terminar el ng serve -o
correr:
ng generate component components/footer
o lo q es lo mismo:
ng g c components/footer
output:
CREATE src/app/components/footer/footer.component.html (21 bytes)
CREATE src/app/components/footer/footer.component.spec.ts (626 bytes)
CREATE src/app/components/footer/footer.component.ts (275 bytes)
CREATE src/app/components/footer/footer.component.css (0 bytes)
UPDATE src/app/app.module.ts (585 bytes)

el  src/app/components/footer/footer.component.spec.ts

es un archivo de pruebas, no nos interesa para un nivel principiante, borrarlo

---------------------------------------------
50:
spa = singe plage app

crear un nuevo componente:
creamos manualmente: src\app\components\shared
ahora usamos el angula cli (command line interface)
ng g c components/shared/navbar
g = generate
c = component
recordar eliminar el spec.ts
y borrar el src\app\components\shared\navbar\navbar.component.css pq no se va a usar
y borrar su referencia en el src\app\components\shared\navbar\navbar.component.ts

si queremos bootstrap en nuestro proyecto hay 3 formas de incoporarlo:

1: remotamente

	te vas a :
	https://getbootstrap.com/docs/4.5/getting-started/introduction/#separate

	CSS:
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

	lo pones en src\index.html
	dentro y al final del header

	JS JQUERY Y POPPER:
	lo pones en src\index.html pegado y antes de </body>
	<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>


	acá los motivos del por qué
	https://www.w3schools.com/js/js_whereto.asp#:~:text=JavaScript%20in%20or%20%3C,HTML%20page%2C%20or%20in%20both.


	nota: hay una version (bundle) en la que vienen popper y jquery juntos, que es la que se ve primera en bootstrap

		<!-- CSS -->
		<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

		<!-- jQuery and JS bundle w/ Popper.js -->
		<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
		<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>

2: descargarlo manualmente

	descargas
	https://getbootstrap.com/docs/4.5/getting-started/download/

	bootstrap-4.5.3-dist.zip:

	en consola tiro:
		cd C:\Users\asd\Downloads\bootstrap-4.5.3-dist
		dir /s /b

	o mejor:
		forfiles /s /m *.* /c "cmd /c echo @relpath"

	mejor aun:
		@echo off
		for /f %A in ('forfiles /s /m * /c "cmd /c echo @relpath"') do echo %~A
		 
	y tengo:
		bootstrap-4.5.3-dist\css
		bootstrap-4.5.3-dist\js
		bootstrap-4.5.3-dist\css\bootstrap-grid.css
		bootstrap-4.5.3-dist\css\bootstrap-grid.css.map
		bootstrap-4.5.3-dist\css\bootstrap-grid.min.css
		bootstrap-4.5.3-dist\css\bootstrap-grid.min.css.map
		bootstrap-4.5.3-dist\css\bootstrap-reboot.css
		bootstrap-4.5.3-dist\css\bootstrap-reboot.css.map
		bootstrap-4.5.3-dist\css\bootstrap-reboot.min.css
		bootstrap-4.5.3-dist\css\bootstrap-reboot.min.css.map
		bootstrap-4.5.3-dist\css\bootstrap.css
		bootstrap-4.5.3-dist\css\bootstrap.css.map
		bootstrap-4.5.3-dist\css\bootstrap.min.css
		bootstrap-4.5.3-dist\css\bootstrap.min.css.map
		bootstrap-4.5.3-dist\js\bootstrap.bundle.js
		bootstrap-4.5.3-dist\js\bootstrap.bundle.js.map
		bootstrap-4.5.3-dist\js\bootstrap.bundle.min.js
		bootstrap-4.5.3-dist\js\bootstrap.bundle.min.js.map
		bootstrap-4.5.3-dist\js\bootstrap.js
		bootstrap-4.5.3-dist\js\bootstrap.js.map
		bootstrap-4.5.3-dist\js\bootstrap.min.js
		bootstrap-4.5.3-dist\js\bootstrap.min.js.map

	usualmente las librerias vienen en una carpeta de dist (=distribucion)

	pego su contenido en src\assets\libs
	quedando:
	src\assets\libs\css
	src\assets\libs\js

	no es un patron obligatorio, pero si recomendado, se puede poner en cualquier carpeta siempre q sea dentro de assets q es donde va el contenido estatico

	luego cambiar las urls de los links

		CSS:
		<link rel="stylesheet" href="./assets/libs/css/bootstrap.min.css">
		si no somos autores del archivo, es recomendado siempre usar la version min.imizada o comprimida

	como vemos en boostrap viene el bundle, si lo queremos separado deberiamos descargar tambien popper y jquery y repetir los pasos
	https://jquery.com/download/
	https://popper.js.org/

		JS bundle:
		<script src="./assets/libs/js/jquery-3.5.1.slim.min.js"></script>
		<script src="./assets/libs/js/bootstrap.bundle.min.js"></script>

		JS popper y jquery separados:
		<script src="./assets/libs/js/jquery-3.5.1.slim.min.js"></script>
		<script src="./assets/libs/js/popper.min.js"></script>
		<script src="./assets/libs/js/bootstrap.min.js"></script>


3: npm install

En consola:
	cd C:\Users\asd\Desktop\tests\angulartests\CursoAngular10CeroAExperto\Angular\02-spa
	npm install bootstrap --save
	npm install jquery --save
	npm install popper.js --save

el --save indica q es una libreria que mi proyecto va a necesitar.

Los modulos instalan en la carpeta node_modules por ej: node_modules/bootstrap

Ahora como los utilizo en mi proyecto?
estas lineas no van a estar en el index.html:
	<!-- CSS -->
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

	<!-- jQuery and JS bundle w/ Popper.js -->
	<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
	<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>

Asi que para q mi proyecto detecte estos modulos, debo especificarlo en el ./angular.json
busco dentro de la llave "projects": {
los campos::
	"styles": [
	  "src/styles.css"
	],
	"scripts": []

y lo cambio por:

	"styles": [
	  "src/styles.css",
      "node_modules/bootstrap/dist/css/bootstrap.min.css"
	],
	"scripts": [
      "node_modules/jquery/dist/jquery.slim.min.js",
      "node_modules/popper.js/dist/umd/popper.min.js",
      "node_modules/bootstrap/dist/js/bootstrap.min.js"
	],

normalmente la libreria con mas dependencias va al final (antes van sus dependencias), como bootstrap necesita popper y jquery, va a lo ultimo
bajo el server y lo vuelvo a subir (ng serve)
notar q el popper q se usa esta dentro de la carpeta umd

51:
si no queremos crear el css con un component, agregar -is (=inlinestyle)
C:\Users\asd\Desktop\tests\angulartests\CursoAngular10CeroAExperto\Angular\02-spa> ng g c components/heroes -is
	CREATE src/app/components/heroes/heroes.component.html (21 bytes)
	CREATE src/app/components/heroes/heroes.component.spec.ts (626 bytes)
	CREATE src/app/components/heroes/heroes.component.ts (251 bytes)
	UPDATE src/app/app.module.ts (681 bytes)

podrias crearlo sin el -is y despues borrar el .css pero acordate de tambien borrar esta linea
  styleUrls: ['./xxxxx.component.css']

en el  xxxxx/component.ts














